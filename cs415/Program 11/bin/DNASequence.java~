import wheelsunh.users.*;

import java.awt.Color;

import com.sun.org.apache.bcel.internal.classfile.Method;

/**
 * DNASequence - a class to represent a DNA sequence from a FASTA format file.
 * It includes header and sequence information.
 * 
 * @author rdb
 * 
 */
public class DNASequence
{
    // ----------------------- Instance variables ---------------------------
    private String dnaString;
    private String seqId;
    private String seqHeader;
    private int seqLineLen = 50;
    String legalChar = "ATCG";

    // ------------------------- DNASequence( String )
    // -------------------------
    /**
     * Constructor takes the sequence header and the DNA sequence as Strings.
     * 
     * @param header
     *            String
     * @param dna
     *            String
     * 
     */
    public DNASequence(String header, String dna)
    {

        dnaString = dna;
        seqHeader = header;

    }

    // ----------------------------- getDNASequence ---------------------------
    /**
     * return the full dna sequence data as a String.
     * 
     * @return String
     */
    public String getDNASequence()
    {
        return this.dnaString;

    }

    // ----------------------------- getHeader() -----------------------------
    /**
     * return the full dna sequence data as a String.
     * 
     * @return String
     */
    public String getHeader()
    {
        return this.seqHeader;
    }

    // ----------------------------- getId -------------------------------
    /**
     * return the identifying "name" of the sequence.
     * 
     * @return String
     */
    public String getId()
    {
        int x = seqHeader.indexOf( ">" );
        int y = seqHeader.indexOf( " " );
        seqId = seqHeader.substring( x + 1, y );
        return this.seqId;
    }

    // --------------------------- indexOf( String, int ) --------------------
    /**
     * find the next occurrence the search string in the sequence and return
     * its position. Return -1 if not found. This is a a case sensitive search.
     * 
     * @param search
     *            String
     * @param start
     *            int
     * 
     * @return int
     */
    public int indexOf( String search, int start )
    {
        return this.indexOf( search, start );
    }

    // -------------------------------- toString()
    // -----------------------------
    /**
     * Returns a single string that reproduces an approximation to the input
     * format for the sequence. In other words, the returned string must start
     * with a header line that looks like the original header in the input file
     * and includes the line feed character (\n).
     * 
     * The header information is followed (in the same String object being
     * returned) by the sequence data that is broken up into sections that will
     * print nicely. In other words, you should copy the sequence data to the
     * output string in groups of 50 characters followed by a line feed. The
     * line length should be an instance variable so that it can be easily
     * changed.
     * 
     * 
     * @return String
     */
    public String toString()
    {

        return seqHeader + "\n" + dnaString;
    }

    public void validCharacters()
    {
        if ( dnaString != null )
        {
            for ( int i = 0; i < dnaString.length(); i++ )
            {
                int x = i;
                char s2 = dnaString.charAt( x );
                String s3;
                s3 = Character.toString( s2 );
                // System.out.println( s3 );
                // if ( legalChar.indexOf( s3 ) == -1 )
                // {
                // throw new DNASequenceException( "Bad dnaString Sequence" );
                // }
            }
        }
    }

    // Think about defining useful utility methods that will simplify the code
    // in the public methods.

    // -------------------------- main ----------------------------------------
    /**
     * Simple test main.
     * 
     * @param args
     *            String
     */

    public static void main( String[] args )
    {
        // String dna =
        // "ACXGAACCCTGACXGACGTACXGAACCCTGACXGACGTACXGAACCCTGACXGACGT"
        // + "ACXGAACCCTGACXGACGTACXGAACCCTGACXGACGTACXGAACCCTGACXGACGT"
        // + "ACXGAACCCTGACXGACGTACXGAACCCTGACXGACGTACXGAACCCTGACXGACGT"
        // + "ACXGAACCCTGACXGACGTACXGAACCCTGACXGACGTACXGAACCCTGACXGACGT"
        // + "ACXGAACCCTGACXGACGTACXGAACCCTGACXGACGTACXGAACCCTGACXGACGT";
        //
        // String header = ">testId other stuff of unknown format";
        //
        // DNASequence s = new DNASequence( header, dna );
        //
        // System.out.println( "Sequence: \n" + s );

        // ---------------------- add more test code!!!!
        // -----------------------
        // add tests indexOf.

    }
}
