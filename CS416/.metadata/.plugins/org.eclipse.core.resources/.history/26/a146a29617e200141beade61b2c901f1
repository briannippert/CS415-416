import java.util.ArrayList;

/**
 * Move class for Aces Up.
 * 
 * Encapsulate the information for a Move.
 * @author Brian Local
 */
public class Move
{    
    //------------------------ instance variables --------------------------
    ////////////////////////////////////////////////////
    // You need not use this variables. It is here so start code compiles.
    private Card card = null;
    
    public boolean moveToEmpty( int x,  )
    {
        // System.out.println( "Move to Empty Called" );
        int temp = this.getHeighest();

        if ( _play[temp].getStack().isEmpty() == false
                && _play[temp].getStack().size() > 1 )
        {
            Reporter.logMove( 'p', _play[temp].getStack().peek().toString() );
            _play[x].getStack().push( _play[temp].getStack().pop() );
            updateLabels( null );
            this.update();
            System.out.println( "TRUE" );
            return true;

        }
        System.out.println( "FALSE" );

        return false;

    }

    public void move( int x )
    {
        if ( _play[x - 1].getStack().isEmpty() == false )
        {
            Reporter.logMove( 'd', _play[x - 1].getStack().peek().toString() );
            _discards.getStack().push( _play[x - 1].getStack().pop() );
            updateLabels( null );
            this.update();
        }
    }
    
    public boolean moveToEmpty( int x )
    {
        // System.out.println( "Move to Empty Called" );
        int temp = this.getHeighest();

        if ( _play[temp].getStack().isEmpty() == false
                && _play[temp].getStack().size() > 1 )
        {
            Reporter.logMove( 'p', _play[temp].getStack().peek().toString() );
            _play[x].getStack().push( _play[temp].getStack().pop() );
            updateLabels( null );
            this.update();
            System.out.println( "TRUE" );
            return true;

        }
        System.out.println( "FALSE" );

        return false;

    }
    public boolean validMoveTest( int x )
    {
        int col = 0;
        if ( _play[x - 1].getStack().isEmpty() == false )
        {
            Card temp = _play[x - 1].getStack().peek();
            ArrayList<Card> list = new ArrayList<Card>();
            for ( int i = 0; i < 4; i++ )
            {
                if ( _play[i].getStack().isEmpty() == false )
                {
                    list.add( _play[i].getStack().peek() );
                    col++;
                }
            }
            for ( int i = 0; i < col; i++ )
            {
                if ( list.get( i ).getRank().ordinal() > temp.getRank()
                        .ordinal()
                        && list.get( i ).getSuit().ordinal() == temp
                                .getSuit().ordinal() )
                {
                    // System.out.println( "Move Called" );
                    this.move( x );
                    return true;
                }

            }
        }
        return false;
    }


    



    //-------------------- toString() ---------------------------------
    /**
     * Return string representation for a Pile; needs to be compact.
     * @return String
     */
    public String toString()
    {
        if ( card != null )
            return card.toString(); 
        else
            return "Draw";
    }  
}