import java.util.ArrayList;

/**
 * Move class for Aces Up.
 * 
 * Encapsulate the information for a Move.
 * 
 * @author Brian Local
 */
public class Move
{
    // ------------------------ instance variables --------------------------
    // //////////////////////////////////////////////////
    // You need not use this variables. It is here so start code compiles.
    private Card card = null;

    public static boolean moveToEmpty( int x )
    {
        // System.out.println( "Move to Empty Called" );
        int temp = Game.getHeighest();

        if ( Game._play[temp].getStack().isEmpty() == false
                && Game._play[temp].getStack().size() > 1 )
        {
            Reporter.logMove( 'p', Game._play[temp].getStack().peek()
                    .toString() );
            Game._play[x].getStack()
                    .push( Game._play[temp].getStack().pop() );

            System.out.println( "TRUE" );
            return true;

        }
        // System.out.println( "FALSE" );

        return false;

    }

    public static void move( int x )
    {
        if ( Game._play[x - 1].getStack().isEmpty() == false )
        {
            Reporter.logMove( 'd', Game._play[x - 1].getStack().peek()
                    .toString() );
            Game._discards.getStack().push(
                    Game._play[x - 1].getStack().pop() );

        }
    }

    public static boolean validMoveTest( int x )
    {
        int col = 0;
        if ( Game._play[x - 1].getStack().isEmpty() == false )
        {
            Card temp = Game._play[x - 1].getStack().peek();
            ArrayList<Card> list = new ArrayList<Card>();
            for ( int i = 0; i < 4; i++ )
            {
                if ( Game._play[i].getStack().isEmpty() == false )
                {
                    list.add( Game._play[i].getStack().peek() );
                    col++;
                }
            }
            for ( int i = 0; i < col; i++ )
            {
                if ( list.get( i ).getRank().ordinal() > temp.getRank()
                        .ordinal()
                        && list.get( i ).getSuit().ordinal() == temp
                                .getSuit().ordinal() )
                {
                    // System.out.println( "Move Called" );
                    Move.move( x );
                    System.out.println( "True" );
                    return true;

                }

            }
        }
        return false;
    }

    // -------------------- toString() ---------------------------------
    /**
     * Return string representation for a Pile; needs to be compact.
     * 
     * @return String
     */
    public String toString()
    {
        if ( card != null )
            return card.toString();
        else
            return "Draw";
    }
}